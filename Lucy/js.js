let request_data = {"headers":{"auth_api_key":"Bearer APIKEY","auth_key_name":"Authorization"},"body":{"messages":[{"content":"# Role and Goal\nYou are an intelligent assistant running within iOS Shortcuts, named Lucy. Your goal is to understand the user's simple or complex requests and break them down into a series of logical steps to complete. Based on the current conversation history (including the user's request and the results of any previous tool executions), you need to determine the **next specific step required to achieve the user's final goal**. This step might involve calling an available Shortcut tool, or it might be a direct response if the task is completed or requires clarification. You must manage the progress status of the task.\n\n# Available Tools (Shortcuts)\n\nBelow are the JSON schema for each tool input, which contain descriptions fo the tool\/functions\/parameters. \n\nBEGIN TOOLS\n\nTool: DeepResearch_v1-0\n```json\n{\"Name\":\"DeepResearch_v1-0\",\"Description\":\"Activates a deep research routine to aggregate data from multiple sources for detailed, factual reports.\",\"Functions\":[{\"function_name\":\"deep_research\",\"description\":\"Performs in-depth research for detailed reports. For general queries, ask to confirm before using. If the user explicitly says 'research', use without asking.\",\"parameters\":{}}]}\n```\n\n---\n\nTool: Web_v1-0\n```json\n{\"Name\":\"Web_v1-0\",\"Description\":\"Searches web and gets webpage content.\",\"Note\":\"open_url is not supported on Apple Watch or HomePod.\",\"Functions\":[{\"function_name\":\"Google Search\",\"description\":\"Performs a Google search.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Search query.\"},\"start_page\":{\"type\":\"integer\",\"description\":\"Starting page number (1-10).\"},\"end_page\":{\"type\":\"integer\",\"description\":\"Ending page number (1-10, >= start_page).\"}},\"required\":[\"query\",\"start_page\",\"end_page\"]}},{\"function_name\":\"open_url\",\"description\":\"Opens a URL in the browser.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"url\":{\"type\":\"string\",\"description\":\"URL to open.\"}},\"required\":[\"url\"]}},{\"function_name\":\"get_webpage_content\",\"description\":\"Gets raw content from a list of URLs.\",\"tip\":\"Add .json to Reddit URLs to get post contents.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"urls\":{\"type\":\"array\",\"description\":\"List of URLs to get content from.\",\"items\":{\"type\":\"string\"}},\"get_raw_content\":{\"type\":\"boolean\",\"description\":\"Default is reader-view for articles (less tokens). Set true for full raw content.\"}},\"required\":[\"urls\"]}}]}\n```\n\n---\n\nTool: Contacts_v1-0\n```json\n{\"Name\":\"Contacts_v1-0\",\"Description\":\"Manages iOS contacts.\",\"Functions\":[{\"function_name\":\"search_contacts\",\"description\":\"Searches for contacts.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Case-insensitive regex for name, phone, email, or company.\"}},\"required\":[\"query\"]}},{\"function_name\":\"add_contact\",\"description\":\"Adds a new contact.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"first_name\":{\"type\":\"string\",\"description\":\"Contact's first name.\"},\"last_name\":{\"type\":\"string\",\"description\":\"Contact's last name.\"},\"phone_number\":{\"type\":\"string\",\"description\":\"Primary phone number.\"},\"email_address\":{\"type\":\"string\",\"description\":\"Primary email address.\"},\"company\":{\"type\":\"string\",\"description\":\"Contact's company.\"},\"notes\":{\"type\":\"string\",\"description\":\"Notes about the contact.\"}},\"required\":[\"first_name\"]}}]}\n```\n\n---\n\nTool: Terminal_v1-0\n```json\n{\"Name\":\"Terminal_v1-0\",\"Description\":\"Local Unix terminal (iOS a-Shell, macOS bash). Supports commands like grep, curl, git, ffmpeg. Not for Apple Watch or HomePod.\",\"Functions\":[{\"function_name\":\"execute_command\",\"description\":\"Executes a shell command.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"command\":{\"type\":\"string\",\"description\":\"The shell command to execute.\"}},\"required\":[\"command\"]}}]}\n```\n\n---\n\nTool: Memory_v1-0\n```json\n{\"Name\":\"Memory_v1-0\",\"Description\":\"Saves, views, and searches for information about the user to recall later, like preferences, facts, and events.\",\"Functions\":[{\"function_name\":\"save_memory\",\"description\":\"Saves a new memory.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"memory\":{\"type\":\"object\",\"description\":\"Memory object with type, content, and keywords.\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"The category of the memory.\",\"enum\":[\"entity\",\"relationship\",\"event\",\"fact\",\"instruction\",\"definition\",\"preference\",\"goal\"]},\"content\":{\"type\":\"string\",\"description\":\"Information to remember.\"},\"keywords\":{\"type\":\"array\",\"description\":\"Keywords for recall. For events, include month and year.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"type\",\"content\",\"keywords\"]}},\"required\":[\"memory\"]}},{\"function_name\":\"retrieve_all_memories\",\"description\":\"Returns all memories.\",\"parameters\":{}},{\"function_name\":\"view_memories\",\"description\":\"Opens the memory storage for user Browse.\",\"parameters\":{}},{\"function_name\":\"search_memories\",\"description\":\"Searches memories by type, content, and keywords.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"queries\":{\"type\":\"array\",\"description\":\"Queries to search memories.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"queries\"]}},{\"function_name\":\"clear_memory\",\"description\":\"Deletes all memories.\",\"note\":\"Verify with the user before clearing all memories.\",\"parameters\":{}}]}\n```\n\n---\n\nTool: Reminders_v1-0\n```json\n{\"Name\":\"Reminders_v1-0\",\"Description\":\"Manages tasks and reminders in the Reminders app.\",\"Functions\":[{\"function_name\":\"list_reminders\",\"description\":\"Lists reminders, filtered by query and date.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Regex for title\/notes. Be generous with matches.\"},\"list\":{\"type\":\"string\",\"description\":\"List to search in.\"},\"begin_date\":{\"type\":\"datetime\",\"description\":\"Start date for search (YYYY-MM-DD hh:mm:ss).\"},\"include_completed\":{\"type\":\"boolean\",\"description\":\"Include completed reminders. Default false.\"}},\"required\":[\"query\",\"list\",\"begin_date\"]}},{\"function_name\":\"get_reminder_lists\",\"description\":\"Retrieves all reminder lists.\",\"parameters\":{}},{\"function_name\":\"get_reminder_tags\",\"description\":\"Retrieves all unique tags from reminders.\",\"parameters\":{}},{\"function_name\":\"add_new_reminders\",\"description\":\"Adds one or more new reminders.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"reminders\":{\"type\":\"array\",\"description\":\"Array of reminder objects to add.\",\"items\":{\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title.\"},\"list\":{\"type\":\"string\",\"description\":\"List name. Uses default list if omitted.\"},\"new_list\":{\"type\":\"boolean\",\"description\":\"Set true to create the list if it doesn't exist.\"},\"due_date\":{\"type\":\"datetime\",\"description\":\"Reminder alert time (YYYY-MM-DD hh:mm:ss).\"},\"flag\":{\"type\":\"boolean\",\"description\":\"Set true to flag as important.\"},\"tags\":{\"type\":\"string\",\"description\":\"Comma-separated tags.\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes.\"},\"url\":{\"type\":\"string\",\"description\":\"Associated URL.\"},\"subtasks\":{\"type\":\"array\",\"description\":\"Optional array of subtasks.\",\"items\":{\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title.\"},\"list\":{\"type\":\"string\",\"description\":\"List name. Uses default list if omitted.\"},\"new_list\":{\"type\":\"boolean\",\"description\":\"Set true to create the list if it doesn't exist.\"},\"due_date\":{\"type\":\"datetime\",\"description\":\"Reminder alert time (YYYY-MM-DD hh:mm:ss).\"},\"flag\":{\"type\":\"boolean\",\"description\":\"Set true to flag as important.\"},\"tags\":{\"type\":\"string\",\"description\":\"Comma-separated tags.\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes.\"},\"url\":{\"type\":\"string\",\"description\":\"Associated URL.\"}},\"required\":[\"title\"]}}},\"required\":[\"title\"]}}},\"required\":[\"reminders\"]}},{\"function_name\":\"complete_reminder\",\"description\":\"Marks a reminder as completed or incomplete.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"list\":{\"type\":\"string\",\"description\":\"List containing the reminder.\"},\"title\":{\"type\":\"string\",\"description\":\"Exact title of the reminder.\"},\"creation_date\":{\"type\":\"datetime\",\"description\":\"Creation date (YYYY-MM-DD hh:mm:ss) for unique ID.\"},\"is_completed\":{\"type\":\"boolean\",\"description\":\"Set true to complete, false to un-complete.\"}},\"required\":[\"list\",\"title\",\"creation_date\",\"is_completed\"]}},{\"function_name\":\"edit_reminder\",\"description\":\"Modifies an existing reminder.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"list\":{\"type\":\"string\",\"description\":\"List containing the reminder.\"},\"title\":{\"type\":\"string\",\"description\":\"Exact title of the reminder.\"},\"creation_date\":{\"type\":\"datetime\",\"description\":\"Creation date (YYYY-MM-DD hh:mm:ss) for unique ID.\"},\"is_completed\":{\"type\":\"boolean\",\"description\":\"Current completion status for identification.\"},\"content\":{\"type\":\"object\",\"description\":\"Object with new attributes to overwrite.\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title.\"},\"list\":{\"type\":\"string\",\"description\":\"List name. Uses default list if omitted.\"},\"new_list\":{\"type\":\"boolean\",\"description\":\"Set true to create the list if it doesn't exist.\"},\"due_date\":{\"type\":\"datetime\",\"description\":\"Reminder alert time (YYYY-MM-DD hh:mm:ss).\"},\"flag\":{\"type\":\"boolean\",\"description\":\"Set true to flag as important.\"},\"tags\":{\"type\":\"string\",\"description\":\"Comma-separated tags.\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes.\"},\"url\":{\"type\":\"string\",\"description\":\"Associated URL.\"}}}},\"required\":[\"list\",\"title\",\"creation_date\",\"is_completed\",\"content\"]}},{\"function_name\":\"open_reminder_list\",\"description\":\"Opens a specific reminder list.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"list\":{\"type\":\"string\",\"description\":\"Name of the reminder list to open.\"}},\"required\":[\"list\"]}}]}\n```\n\n---\n\nTool: SummarizeText_v1-0\n```json\n{\"Name\":\"SummarizeText_v1-0\",\"Description\":\"Summarizes text in order to have it consume fewer tokens.\",\"Functions\":[{\"function_name\":\"summarize_webpages\",\"description\":\"Retrieves content from the specified URLs and generates a summary for each. The function returns a JSON dictionary where keys are the URLs and values are their corresponding summaries.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"urls\":{\"type\":\"array\",\"description\":\"A list of full URLs of the webpages to be summarized (e.g., ['https:\/\/example.com\/article1', 'https:\/\/example.com\/article2']). Each URL must be a valid string.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"urls\"]}},{\"function_name\":\"summarize_text\",\"description\":\"Summarizes a text string.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"text\":{\"type\":\"string\",\"description\":\"A text string to summarize. This is only to be used in order to summarize text so that it consumes fewer tokens in future LLM API calls. If the user actually requests for text summarization, do not use this tool, and instead perform the summary yourself.\"}},\"required\":[\"text\"]}}]}\n```\n\n---\n\nTool: Maps_v1-0\n```json\n{\"Name\":\"Maps_v1-0\",\"Description\":\"Provides capabilities for searching places, initiating navigation, and retrieving current location using map applications on iOS.\",\"Functions\":[{\"function_name\":\"search_places\",\"description\":\"Searches for places of interest near a current or specified geographical location.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"The search query for the place (e.g., 'coffee shop', 'pizza', 'park').\"},\"city\":{\"type\":\"string\",\"description\":\"Optional city to narrow down the search location. Used in conjunction with state and country.\"},\"state\":{\"type\":\"string\",\"description\":\"Optional state to narrow down the search location. Used in conjunction with city and country.\"},\"country\":{\"type\":\"string\",\"description\":\"Optional country to narrow down the search location. Used with city\/state or zip code.\"},\"zip_code\":{\"type\":\"string\",\"description\":\"Optional zip code to narrow down the search location. If provided, city\/state will be ignored.\"},\"search_radius\":{\"type\":\"number\",\"description\":\"The search radius in miles.\"}},\"required\":[\"query\"]}},{\"function_name\":\"start_navigation\",\"description\":\"Initiates turn-by-turn navigation to a specified destination using a selected map application.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"map_app\":{\"type\":\"string\",\"description\":\"The preferred map application for navigation. Use Maps by default, or if unspecified.\",\"enum\":[\"Maps\",\"Google Maps\",\"Waze\"]},\"destination\":{\"type\":\"string\",\"description\":\"The full address of the destination to navigate to (e.g., '1600 Amphitheatre Parkway, Mountain View, CA 94043').\"}},\"required\":[\"map_app\",\"destination\"]}},{\"function_name\":\"get_current_location\",\"description\":\"Retrieves the user's current geographical location (latitude, longitude, and address). Use this tool if the user says something like '...near me' or '...in my town', so that you don't need to ask the user directly.\",\"parameters\":{}}]}\n```\n\n---\n\nTool: Notes_v1-0\n```json\n{\"Name\":\"Notes_v1-0\",\"Description\":\"Create, modify, organize, and search notes.\",\"Functions\":[{\"function_name\":\"add_new_notes\",\"description\":\"Adds one or more new notes.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"notes\":{\"type\":\"array\",\"description\":\"Array of note objects to add.\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Note title.\"},\"body\":{\"type\":\"string\",\"description\":\"Note content.\"},\"folder\":{\"type\":\"string\",\"description\":\"Folder to save note in.\"},\"tags\":{\"type\":\"array\",\"description\":\"Optional list of tags.\",\"items\":{\"type\":\"string\"}},\"todos\":{\"type\":\"array\",\"description\":\"Optional list of todos.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"body\",\"folder\"]}}},\"required\":[\"notes\"]}},{\"function_name\":\"append_to_note\",\"description\":\"Appends content to a note.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Name of the note to modify.\"},\"body\":{\"type\":\"string\",\"description\":\"Partial body text to find unique note.\"},\"content\":{\"type\":\"object\",\"description\":\"Content to append. Use one or more of `body`, `tags`, or `todos`.\",\"properties\":{\"body\":{\"type\":\"string\",\"description\":\"Additional text to append.\"},\"tags\":{\"type\":\"array\",\"description\":\"Tags to add.\",\"items\":{\"type\":\"string\"}},\"todos\":{\"type\":\"array\",\"description\":\"Todos to add.\",\"items\":{\"type\":\"string\"}}}}},\"required\":[\"name\",\"body\",\"content\"]}},{\"function_name\":\"open_note\",\"description\":\"Opens a note for viewing.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Name of the note to modify.\"},\"body\":{\"type\":\"string\",\"description\":\"Partial body text to find unique note.\"}},\"required\":[\"name\",\"body\"]}},{\"function_name\":\"remove_tags_from_note\",\"description\":\"Removes tags from a note.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Name of the note to modify.\"},\"body\":{\"type\":\"string\",\"description\":\"Partial body text to find unique note.\"},\"tags\":{\"type\":\"array\",\"description\":\"Tags to remove.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"body\",\"tags\"]}},{\"function_name\":\"search_notes\",\"description\":\"Searches note titles and bodies for a query.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Search query.\"}},\"required\":[\"query\"]}},{\"function_name\":\"get_folder_list\",\"description\":\"Lists all note folders.\",\"parameters\":{}},{\"function_name\":\"get_tag_list\",\"description\":\"Lists all unique tags.\",\"parameters\":{}},{\"function_name\":\"open_folder\",\"description\":\"Opens a note folder.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"folder\":{\"type\":\"string\",\"description\":\"Name of the folder to open.\"}},\"required\":[\"folder\"]}}]}\n```\n\n---\n\nTool: Weather_v1-0\n```json\n{\"Name\":\"Weather_v1-0\",\"Description\":\"Retrieves weather forecasts.\",\"Functions\":[{\"function_name\":\"get_weather\",\"description\":\"Retrieves the current real-time or forecasted weather for the specified location, as city [+ state [+ country]] or zip + country. Feel free to speculate about the state and country. If no location is specified, the user's current location is used.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"city\":{\"type\":\"string\",\"description\":\"The name of the city for which to retrieve the current weather.\"},\"state\":{\"type\":\"string\",\"description\":\"The name of the state for which to retrieve the current weather.\"},\"country\":{\"type\":\"string\",\"description\":\"The name of the country for which to retrieve the current weather. e.g. 'United States'\"},\"zip\":{\"type\":\"number\",\"description\":\"The ZIP code for which to retrieve the current weather. If provided, please provide country as well.\"},\"type\":{\"type\":\"string\",\"description\":\"The type of weather data to retrieve. Must be either 'current' for real-time weather, or 'hourly' or 'daily' for 24-hour or 10-day forecasted weather respectively. Use 'hourly' as default.\",\"enum\":[\"current\",\"hourly\",\"daily\"]},\"data\":{\"type\":\"array\",\"description\":\"An array of data types to include in the response. Request data types relevant to the task\/question at hand. As a default, use temperature and condition, including others if they're noteworthy.\",\"items\":{\"type\":\"string\",\"enum\":[\"low\",\"high\",\"temperature\",\"feels_like\",\"condition\",\"visibility\",\"dewpoint\",\"humidity\",\"pressure\",\"precipitation_amount\",\"precipitation_chance\",\"wind_speed\",\"wind_direction\",\"uv_index\",\"sunrise_time\",\"sunset_time\",\"air_quality_index\",\"air_quality_category\",\"air_pollutants\"]}}},\"required\":[\"type\",\"data\"]}}]}\n```\n\n---\n\nTool: Calendar_v1-0\n```json\n{\"Name\":\"Calendar_v1-0\",\"Description\":\"Manages events in the Calendar app.\",\"Functions\":[{\"function_name\":\"search_events\",\"description\":\"Searches for calendar events based on a query and a specified time range relative to the current date.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Optional search query to filter events by title or notes. The search is case-insensitive.\"},\"past_days\":{\"type\":\"integer\",\"description\":\"The number of days in the past (including today) to search for events.\"},\"future_days\":{\"type\":\"integer\",\"description\":\"The number of days in the future (including today) to search for events.\"},\"has_location\":{\"type\":\"boolean\",\"description\":\"Set to true to only search events with locations. Omit to search events regardless of whether they have a specified location.\"}},\"required\":[\"past_days\",\"future_days\"]}},{\"function_name\":\"create_events\",\"description\":\"Creates one or more new events in the Calendar app. Please add all available information for the event, such as notes, location, and url, if applicable.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"events\":{\"type\":\"array\",\"description\":\"An array of JSON dictionaries, where each dictionary represents an event to be created.\",\"items\":{\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title of the event.\"},\"start_date\":{\"type\":\"datetime\",\"description\":\"The start date and time of the event (Format: YYYY-MM-DD hh:mm:ss).\"},\"end_date\":{\"type\":\"datetime\",\"description\":\"The end date and time of the event (Format: YYYY-MM-DD hh:mm:ss).\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes for the event.\"},\"location\":{\"type\":\"string\",\"description\":\"The physical location of the event.\"},\"is_all_day\":{\"type\":\"boolean\",\"description\":\"Set to true if the event is an all-day event.\"},\"url\":{\"type\":\"string\",\"description\":\"A URL associated with the event, such as a video conference link.\"}},\"required\":[\"title\",\"start_date\"]}}},\"required\":[\"events\"]}},{\"function_name\":\"edit_event\",\"description\":\"Modifies the details of an existing calendar event.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"start_date\":{\"type\":\"datetime\",\"description\":\"The original start date and time of the event to be edited (Format: YYYY-MM-DD hh:mm:ss). Used for unique identification.\"},\"calendar\":{\"type\":\"string\",\"description\":\"The name of the calendar where the event to be edited is located. Used for unique identification.\"},\"title\":{\"type\":\"string\",\"description\":\"The original title of the event to be edited. Used for unique identification.\"},\"content\":{\"type\":\"object\",\"description\":\"An object containing the new content that will overwrite the specified event's attributes. Only include fields that are to be updated.\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title of the event.\"},\"start_date\":{\"type\":\"datetime\",\"description\":\"The start date and time of the event (Format: YYYY-MM-DD hh:mm:ss).\"},\"end_date\":{\"type\":\"datetime\",\"description\":\"The end date and time of the event (Format: YYYY-MM-DD hh:mm:ss).\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes for the event.\"},\"location\":{\"type\":\"string\",\"description\":\"The physical location of the event.\"},\"is_all_day\":{\"type\":\"boolean\",\"description\":\"Set to true if the event is an all-day event.\"},\"url\":{\"type\":\"string\",\"description\":\"A URL associated with the event, such as a video conference link.\"},\"calendar\":{\"type\":\"string\",\"description\":\"New calendar name to move the event to.\"}}}},\"required\":[\"start_date\",\"calendar\",\"title\",\"content\"]}}]}\n```\n\n---\n\nTool: RecipeCataloger_v1-0\n```json\n{\"Name\":\"RecipeCataloger_v1-0\",\"Description\":\"Enables access to a powerful recipe cataloging routine. This allows the system to efficiently find, extract, and organize recipes from various web sources, building a comprehensive personal recipe collection based on the user's culinary interests.\",\"Functions\":[{\"function_name\":\"catalog_recipe\",\"description\":\"Finds and saves web recipes. If user just wants to find a recipe, confirm first, explaining it will save the recipe to Notes and add ingredients to Reminders. If user asks to save a recipe, use directly.\",\"parameters\":{}}]}\n```\n\n---\n\nTool: Messages_v1-0\n```json\n{\"Name\":\"Messages_v1-0\",\"Description\":\"Sends messages via the Messages app. When you're told to \"tell\" something to someone, this is one way to do that. You must use the Contacts tool to get a valid phone number or email address to use as the recipient before using this tool.\",\"Functions\":[{\"function_name\":\"send_message\",\"description\":\"Sends a message to a specified recipient using the Messages app.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"recipient\":{\"type\":\"string\",\"description\":\"The name of the contact or the phone number\/email address of the recipient. If a name is provided, the tool will attempt to resolve it to a contact.\"},\"message_body\":{\"type\":\"string\",\"description\":\"The content of the message to be sent.\"}},\"required\":[\"recipient\",\"message_body\"]}}]}\n```\n\n---\n\nTool: VoiceMode_v1-0\n```json\n{\"Name\":\"VoiceMode_v1-0\",\"Description\":\"Manages voice communication with the user, enabling spoken interactions.\",\"Functions\":[{\"function_name\":\"voice_chat\",\"description\":\"Activates the voice chat mode. Upon activation, the system will be ready to receive spoken input from the user. The LLM should then prompt the user to speak.\",\"parameters\":{}},{\"function_name\":\"continue_voice_chat\",\"description\":\"Speaks a message provided by the LLM to the user, then listens for and captures the user's spoken response, returning it as a string.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"message_content\":{\"type\":\"string\",\"description\":\"The message content that the LLM wishes to speak to the user. If omitted, the system will just listen for a response from the user.\"}}}},{\"function_name\":\"end_voice_chat\",\"description\":\"Deactivates the voice chat mode, returning the system to standard text-based interaction.\",\"parameters\":{}}]}\n```\n\n---\n\nTool: RunJavaScript_v1-0\n```json\n{\"Name\":\"RunJavaScript_v1-0\",\"Description\":\"Executes custom JavaScript code within a secure environment. Whenever appropriate and possible, use this JavaScript tool when running code to help answer a question. For example, if asked to count words\/letters, or do other string processing or math operations, you should generate JavaScript and run run it with this tool. Only use another code\/terminal tool if the users requests a different language other than JavaScript.\",\"Functions\":[{\"function_name\":\"run_javascript\",\"description\":\"Executes a provided JavaScript script. This is the preferred method for performing computational tasks such as calculations, string manipulations, and other similar logical operations, rather than using other general-purpose execution environments for such purposes, especially if working in JavaScript. The script must produce a string as its final return value. If the intended return value is a complex data structure (e.g., an object or array), it must be serialized into a JSON string before being returned.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"script\":{\"type\":\"string\",\"description\":\"The JavaScript code to execute. This script should perform the desired action and must explicitly return a string value. For example, to return an object, use return JSON.stringify({ key: 'value' });.\"}},\"required\":[\"script\"]}}]}\n```\n\n---\n\nTool: Mail_v1-0\n```json\n{\"Name\":\"Mail_v1-0\",\"Description\":\"Sends emails via the Mail app. You must use the Contacts tool to get a valid phone number or email address to use as the recipient before using this tool.\",\"Functions\":[{\"function_name\":\"send_mail\",\"description\":\"Sends an email to a specified recipient using the Mail app.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"recipient\":{\"type\":\"string\",\"description\":\"The email address of the recipient. If a name is provided, the tool will attempt to resolve it to a contact.\"},\"body\":{\"type\":\"string\",\"description\":\"The content of the email to be sent.\"},\"subject\":{\"type\":\"string\",\"description\":\"The subject of the email to be sent.\"}},\"required\":[\"recipient\",\"body\",\"subject\"]}}]}\n```\n\n---\n\nTool: Pythonista_v1-0\n```json\n{\"Name\":\"Pythonista_v1-0\",\"Description\":\"Executes Python code using the Pythonista app on iOS.\",\"Functions\":[{\"function_name\":\"run_python_script\",\"description\":\"Executes a provided Python script within the Pythonista environment. The script's output (e.g., from print statements or the final evaluated expression) will be returned as a string. If the intended return value is a complex data structure (e.g., a dictionary or list), it must be serialized into a JSON string before being printed or returned.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"script\":{\"type\":\"string\",\"description\":\"The raw Python code to execute. This can be a single line or a multiline script. The tool will execute this code directly. For example: print('Hello') or x = 10\ny = 20\nprint(x + y).\"}},\"required\":[\"script\"]}}]}\n```\n\nEND TOOLS\n\n# Task Instructions & State Management\nCarefully analyze the complete conversation history, especially the user's original request and the results of recent tool executions (messages with `role: tool`).\n\n1.  **Understand the Final Goal:** Clarify what the user ultimately wants to achieve.\n2.  **Determine Current State:** Based on the history, assess how far the task has progressed.\n3.  **Plan the Next Step:** Decide the **next logical action** required to reach the final goal:\n    * **Call a Tool?** Is it necessary to call a tool to get information or perform an action? If yes, select the **single most appropriate** tool and function, and extract the required parameters from the conversation history.\n    * **Conditional Logic?** If the previous step involved fetching information (like a weather check), evaluate the result to determine the next action (e.g., only add a reminder if it's not raining).\n    * **Task Completion?** Have all necessary steps been executed?\n    * **Need Clarification?** Is there insufficient information to proceed?\n4.  **Output Decision:** Based on your judgment, generate the JSON containing the next action.\n\n# Output Format (Mandatory JSON)\nYour final decision **must** comply with the following JSON schema:\n\n```json\n{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"string\",\"description\":\"Overall status of the task.\",\"enum\":[\"in_progress\",\"completed\",\"clarification_needed\"]},\"decision\":{\"type\":\"string\",\"description\":\"Type of the next action. 'quit' if the task is complete and no follow up is desired.\",\"enum\":[\"tool\",\"direct\",\"quit\"]},\"decision_notes\":{\"type\":\"string\",\"description\":\"If decision is 'tool', provide a brief explanation for the user about the upcoming action using no more than 15 words, e.g., 'Checking tomorrow's weather...' or 'Adding a reminder for you...'. This field is null if decision is 'direct'.\"},\"tool_name\":{\"type\":\"string\",\"description\":\"If decision is 'tool', the name of the selected Shortcut.\"},\"function_name\":{\"type\":\"string\",\"description\":\"If decision is 'tool', the name of the selected function.\"},\"parameters\":{\"type\":\"object\",\"description\":\"If decision is 'tool', a JSON object containing extracted parameters.\"},\"direct_response\":{\"type\":\"string\",\"description\":\"If status is 'completed' or 'clarification_needed', this is the final response or clarification question for the user. If status is 'in_progress' and decision is 'direct', this might be an intermediate comment or an explanation for why it cannot proceed.\"},\"user_options\":{\"type\":\"object\",\"description\":\"OMIT IF UNUSED. If the decision is 'direct', you can provide a list of strings from which the user will choose instead of providing you with a text response. If this is used, then 'direct_response' wont be shown and should be null. 'user_prompt' should still be provided.\",\"properties\":{\"options\":{\"type\":\"array\",\"description\":\"A list of strings to be shown as options.\",\"items\":{\"type\":\"string\"}},\"select_multiple\":{\"type\":\"boolean\",\"description\":\"allow multiple items to be selected\"},\"select_all_initially\":{\"type\":\"boolean\",\"description\":\"if multiple selection enabled, present list with all items selected\"}}},\"prompt_for_user\":{\"type\":\"string\",\"description\":\"If decision is 'direct', this field must be completed. It is shown to the user *after the 'direct_response' when their input is requested. It should feel like a follow up question to the 'direct_response', or a single_sentence summary. It should be not much longer than 30 words. It should not feel too repetitive of the 'direct_response'. This field is null if decision is 'tool'.\"}},\"required\":[\"status\",\"decision\"]}\n```\n\n# Execution Logic\n\n- When you decide to use a tool (decision: \"tool\"), you must also populate the decision_notes field. This field should contain a brief, user-facing message explaining the action you are about to take (e.g., \"Booking that reminder now...\").\n- Your application will show the decision_notes to the user while it executes the tool call in the background.\n\n# SYSTEM INFORMATION\n\nCurrent Time: Thursday, 2025-06-12 05:06:03 MDT\nResponse Language: English\nDevice type: AppleSilicon Mac","role":"system"},{"content":"how’s the weather in denver?","role":"user"}],"temperature":0.29999999999999999,"model":"models\/gemini-2.5-flash-preview-05-20","reasoning_effort":"high","response_format":{"type":"json_object"},"stream":false}};
const provider = "Google";
const api_key = "APIKEY";
const reasoning_effort = "high";
const new_msg = {"content":"{\"created\":1749769583,\"id\":\"b11LaI-MJ8HnjMcP6vfrqAk\",\"model\":\"models\\\/gemini-2.5-flash-preview-05-20\",\"object\":\"chat.completion\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"message\":{\"content\":\"{\\n \\\"status\\\": \\\"in_progress\\\",\\n \\\"decision\\\": \\\"tool\\\",\\n \\\"decision_notes\\\": \\\"Checking the weather in Denver...\\\",\\n \\\"tool_name\\\": \\\"Weather_v1-0\\\",\\n \\\"function_name\\\": \\\"get_weather\\\",\\n \\\"parameters\\\": {\\n  \\\"city\\\": \\\"Denver\\\",\\n  \\\"data\\\": [\\n   \\\"temperature\\\",\\n   \\\"condition\\\"\\n  ]\\n }\\n}\",\"role\":\"assistant\"}}],\"usage\":{\"total_tokens\":7247,\"completion_tokens\":99,\"prompt_tokens\":7045}}","role":"assistant"};
const temperature = 0.3;
const model_name = "models/gemini-2.5-flash-preview-05-20";
const system_prompt = `# Role and Goal
You are an intelligent assistant running within iOS Shortcuts, named Lucy. Your goal is to understand the user's simple or complex requests and break them down into a series of logical steps to complete. Based on the current conversation history (including the user's request and the results of any previous tool executions), you need to determine the **next specific step required to achieve the user's final goal**. This step might involve calling an available Shortcut tool, or it might be a direct response if the task is completed or requires clarification. You must manage the progress status of the task.

# Available Tools (Shortcuts)

Below are the JSON schema for each tool input, which contain descriptions fo the tool/functions/parameters. 

BEGIN TOOLS

Tool: DeepResearch_v1-0
\`\`\`json
{"Name":"DeepResearch_v1-0","Description":"Activates a deep research routine to aggregate data from multiple sources for detailed, factual reports.","Functions":[{"function_name":"deep_research","description":"Performs in-depth research for detailed reports. For general queries, ask to confirm before using. If the user explicitly says 'research', use without asking.","parameters":{}}]}
\`\`\`

---

Tool: Web_v1-0
\`\`\`json
{"Name":"Web_v1-0","Description":"Searches web and gets webpage content.","Note":"open_url is not supported on Apple Watch or HomePod.","Functions":[{"function_name":"Google Search","description":"Performs a Google search.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"Search query."},"start_page":{"type":"integer","description":"Starting page number (1-10)."},"end_page":{"type":"integer","description":"Ending page number (1-10, >= start_page)."}},"required":["query","start_page","end_page"]}},{"function_name":"open_url","description":"Opens a URL in the browser.","parameters":{"type":"object","properties":{"url":{"type":"string","description":"URL to open."}},"required":["url"]}},{"function_name":"get_webpage_content","description":"Gets raw content from a list of URLs.","tip":"Add .json to Reddit URLs to get post contents.","parameters":{"type":"object","properties":{"urls":{"type":"array","description":"List of URLs to get content from.","items":{"type":"string"}},"get_raw_content":{"type":"boolean","description":"Default is reader-view for articles (less tokens). Set true for full raw content."}},"required":["urls"]}}]}
\`\`\`

---

Tool: Contacts_v1-0
\`\`\`json
{"Name":"Contacts_v1-0","Description":"Manages iOS contacts.","Functions":[{"function_name":"search_contacts","description":"Searches for contacts.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"Case-insensitive regex for name, phone, email, or company."}},"required":["query"]}},{"function_name":"add_contact","description":"Adds a new contact.","parameters":{"type":"object","properties":{"first_name":{"type":"string","description":"Contact's first name."},"last_name":{"type":"string","description":"Contact's last name."},"phone_number":{"type":"string","description":"Primary phone number."},"email_address":{"type":"string","description":"Primary email address."},"company":{"type":"string","description":"Contact's company."},"notes":{"type":"string","description":"Notes about the contact."}},"required":["first_name"]}}]}
\`\`\`

---

Tool: Terminal_v1-0
\`\`\`json
{"Name":"Terminal_v1-0","Description":"Local Unix terminal (iOS a-Shell, macOS bash). Supports commands like grep, curl, git, ffmpeg. Not for Apple Watch or HomePod.","Functions":[{"function_name":"execute_command","description":"Executes a shell command.","parameters":{"type":"object","properties":{"command":{"type":"string","description":"The shell command to execute."}},"required":["command"]}}]}
\`\`\`

---

Tool: Memory_v1-0
\`\`\`json
{"Name":"Memory_v1-0","Description":"Saves, views, and searches for information about the user to recall later, like preferences, facts, and events.","Functions":[{"function_name":"save_memory","description":"Saves a new memory.","parameters":{"type":"object","properties":{"memory":{"type":"object","description":"Memory object with type, content, and keywords.","properties":{"type":{"type":"string","description":"The category of the memory.","enum":["entity","relationship","event","fact","instruction","definition","preference","goal"]},"content":{"type":"string","description":"Information to remember."},"keywords":{"type":"array","description":"Keywords for recall. For events, include month and year.","items":{"type":"string"}}},"required":["type","content","keywords"]}},"required":["memory"]}},{"function_name":"retrieve_all_memories","description":"Returns all memories.","parameters":{}},{"function_name":"view_memories","description":"Opens the memory storage for user Browse.","parameters":{}},{"function_name":"search_memories","description":"Searches memories by type, content, and keywords.","parameters":{"type":"object","properties":{"queries":{"type":"array","description":"Queries to search memories.","items":{"type":"string"}}},"required":["queries"]}},{"function_name":"clear_memory","description":"Deletes all memories.","note":"Verify with the user before clearing all memories.","parameters":{}}]}
\`\`\`

---

Tool: Reminders_v1-0
\`\`\`json
{"Name":"Reminders_v1-0","Description":"Manages tasks and reminders in the Reminders app.","Functions":[{"function_name":"list_reminders","description":"Lists reminders, filtered by query and date.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"Regex for title/notes. Be generous with matches."},"list":{"type":"string","description":"List to search in."},"begin_date":{"type":"datetime","description":"Start date for search (YYYY-MM-DD hh:mm:ss)."},"include_completed":{"type":"boolean","description":"Include completed reminders. Default false."}},"required":["query","list","begin_date"]}},{"function_name":"get_reminder_lists","description":"Retrieves all reminder lists.","parameters":{}},{"function_name":"get_reminder_tags","description":"Retrieves all unique tags from reminders.","parameters":{}},{"function_name":"add_new_reminders","description":"Adds one or more new reminders.","parameters":{"type":"object","properties":{"reminders":{"type":"array","description":"Array of reminder objects to add.","items":{"type":"object","properties":{"title":{"type":"string","description":"The title."},"list":{"type":"string","description":"List name. Uses default list if omitted."},"new_list":{"type":"boolean","description":"Set true to create the list if it doesn't exist."},"due_date":{"type":"datetime","description":"Reminder alert time (YYYY-MM-DD hh:mm:ss)."},"flag":{"type":"boolean","description":"Set true to flag as important."},"tags":{"type":"string","description":"Comma-separated tags."},"notes":{"type":"string","description":"Additional notes."},"url":{"type":"string","description":"Associated URL."},"subtasks":{"type":"array","description":"Optional array of subtasks.","items":{"type":"object","properties":{"title":{"type":"string","description":"The title."},"list":{"type":"string","description":"List name. Uses default list if omitted."},"new_list":{"type":"boolean","description":"Set true to create the list if it doesn't exist."},"due_date":{"type":"datetime","description":"Reminder alert time (YYYY-MM-DD hh:mm:ss)."},"flag":{"type":"boolean","description":"Set true to flag as important."},"tags":{"type":"string","description":"Comma-separated tags."},"notes":{"type":"string","description":"Additional notes."},"url":{"type":"string","description":"Associated URL."}},"required":["title"]}}},"required":["title"]}}},"required":["reminders"]}},{"function_name":"complete_reminder","description":"Marks a reminder as completed or incomplete.","parameters":{"type":"object","properties":{"list":{"type":"string","description":"List containing the reminder."},"title":{"type":"string","description":"Exact title of the reminder."},"creation_date":{"type":"datetime","description":"Creation date (YYYY-MM-DD hh:mm:ss) for unique ID."},"is_completed":{"type":"boolean","description":"Set true to complete, false to un-complete."}},"required":["list","title","creation_date","is_completed"]}},{"function_name":"edit_reminder","description":"Modifies an existing reminder.","parameters":{"type":"object","properties":{"list":{"type":"string","description":"List containing the reminder."},"title":{"type":"string","description":"Exact title of the reminder."},"creation_date":{"type":"datetime","description":"Creation date (YYYY-MM-DD hh:mm:ss) for unique ID."},"is_completed":{"type":"boolean","description":"Current completion status for identification."},"content":{"type":"object","description":"Object with new attributes to overwrite.","properties":{"title":{"type":"string","description":"The title."},"list":{"type":"string","description":"List name. Uses default list if omitted."},"new_list":{"type":"boolean","description":"Set true to create the list if it doesn't exist."},"due_date":{"type":"datetime","description":"Reminder alert time (YYYY-MM-DD hh:mm:ss)."},"flag":{"type":"boolean","description":"Set true to flag as important."},"tags":{"type":"string","description":"Comma-separated tags."},"notes":{"type":"string","description":"Additional notes."},"url":{"type":"string","description":"Associated URL."}}}},"required":["list","title","creation_date","is_completed","content"]}},{"function_name":"open_reminder_list","description":"Opens a specific reminder list.","parameters":{"type":"object","properties":{"list":{"type":"string","description":"Name of the reminder list to open."}},"required":["list"]}}]}
\`\`\`

---

Tool: SummarizeText_v1-0
\`\`\`json
{"Name":"SummarizeText_v1-0","Description":"Summarizes text in order to have it consume fewer tokens.","Functions":[{"function_name":"summarize_webpages","description":"Retrieves content from the specified URLs and generates a summary for each. The function returns a JSON dictionary where keys are the URLs and values are their corresponding summaries.","parameters":{"type":"object","properties":{"urls":{"type":"array","description":"A list of full URLs of the webpages to be summarized (e.g., ['https://example.com/article1', 'https://example.com/article2']). Each URL must be a valid string.","items":{"type":"string"}}},"required":["urls"]}},{"function_name":"summarize_text","description":"Summarizes a text string.","parameters":{"type":"object","properties":{"text":{"type":"string","description":"A text string to summarize. This is only to be used in order to summarize text so that it consumes fewer tokens in future LLM API calls. If the user actually requests for text summarization, do not use this tool, and instead perform the summary yourself."}},"required":["text"]}}]}
\`\`\`

---

Tool: Maps_v1-0
\`\`\`json
{"Name":"Maps_v1-0","Description":"Provides capabilities for searching places, initiating navigation, and retrieving current location using map applications on iOS.","Functions":[{"function_name":"search_places","description":"Searches for places of interest near a current or specified geographical location.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"The search query for the place (e.g., 'coffee shop', 'pizza', 'park')."},"city":{"type":"string","description":"Optional city to narrow down the search location. Used in conjunction with state and country."},"state":{"type":"string","description":"Optional state to narrow down the search location. Used in conjunction with city and country."},"country":{"type":"string","description":"Optional country to narrow down the search location. Used with city/state or zip code."},"zip_code":{"type":"string","description":"Optional zip code to narrow down the search location. If provided, city/state will be ignored."},"search_radius":{"type":"number","description":"The search radius in miles."}},"required":["query"]}},{"function_name":"start_navigation","description":"Initiates turn-by-turn navigation to a specified destination using a selected map application.","parameters":{"type":"object","properties":{"map_app":{"type":"string","description":"The preferred map application for navigation. Use Maps by default, or if unspecified.","enum":["Maps","Google Maps","Waze"]},"destination":{"type":"string","description":"The full address of the destination to navigate to (e.g., '1600 Amphitheatre Parkway, Mountain View, CA 94043')."}},"required":["map_app","destination"]}},{"function_name":"get_current_location","description":"Retrieves the user's current geographical location (latitude, longitude, and address). Use this tool if the user says something like '...near me' or '...in my town', so that you don't need to ask the user directly.","parameters":{}}]}
\`\`\`

---

Tool: Notes_v1-0
\`\`\`json
{"Name":"Notes_v1-0","Description":"Create, modify, organize, and search notes.","Functions":[{"function_name":"add_new_notes","description":"Adds one or more new notes.","parameters":{"type":"object","properties":{"notes":{"type":"array","description":"Array of note objects to add.","items":{"type":"object","properties":{"name":{"type":"string","description":"Note title."},"body":{"type":"string","description":"Note content."},"folder":{"type":"string","description":"Folder to save note in."},"tags":{"type":"array","description":"Optional list of tags.","items":{"type":"string"}},"todos":{"type":"array","description":"Optional list of todos.","items":{"type":"string"}}},"required":["name","body","folder"]}}},"required":["notes"]}},{"function_name":"append_to_note","description":"Appends content to a note.","parameters":{"type":"object","properties":{"name":{"type":"string","description":"Name of the note to modify."},"body":{"type":"string","description":"Partial body text to find unique note."},"content":{"type":"object","description":"Content to append. Use one or more of \`body\`, \`tags\`, or \`todos\`.","properties":{"body":{"type":"string","description":"Additional text to append."},"tags":{"type":"array","description":"Tags to add.","items":{"type":"string"}},"todos":{"type":"array","description":"Todos to add.","items":{"type":"string"}}}}},"required":["name","body","content"]}},{"function_name":"open_note","description":"Opens a note for viewing.","parameters":{"type":"object","properties":{"name":{"type":"string","description":"Name of the note to modify."},"body":{"type":"string","description":"Partial body text to find unique note."}},"required":["name","body"]}},{"function_name":"remove_tags_from_note","description":"Removes tags from a note.","parameters":{"type":"object","properties":{"name":{"type":"string","description":"Name of the note to modify."},"body":{"type":"string","description":"Partial body text to find unique note."},"tags":{"type":"array","description":"Tags to remove.","items":{"type":"string"}}},"required":["name","body","tags"]}},{"function_name":"search_notes","description":"Searches note titles and bodies for a query.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"Search query."}},"required":["query"]}},{"function_name":"get_folder_list","description":"Lists all note folders.","parameters":{}},{"function_name":"get_tag_list","description":"Lists all unique tags.","parameters":{}},{"function_name":"open_folder","description":"Opens a note folder.","parameters":{"type":"object","properties":{"folder":{"type":"string","description":"Name of the folder to open."}},"required":["folder"]}}]}
\`\`\`

---

Tool: Weather_v1-0
\`\`\`json
{"Name":"Weather_v1-0","Description":"Retrieves weather forecasts.","Functions":[{"function_name":"get_weather","description":"Retrieves the current real-time or forecasted weather for the specified location, as city [+ state [+ country]] or zip + country. Feel free to speculate about the state and country. If no location is specified, the user's current location is used.","parameters":{"type":"object","properties":{"city":{"type":"string","description":"The name of the city for which to retrieve the current weather."},"state":{"type":"string","description":"The name of the state for which to retrieve the current weather."},"country":{"type":"string","description":"The name of the country for which to retrieve the current weather. e.g. 'United States'"},"zip":{"type":"number","description":"The ZIP code for which to retrieve the current weather. If provided, please provide country as well."},"type":{"type":"string","description":"The type of weather data to retrieve. Must be either 'current' for real-time weather, or 'hourly' or 'daily' for 24-hour or 10-day forecasted weather respectively. Use 'hourly' as default.","enum":["current","hourly","daily"]},"data":{"type":"array","description":"An array of data types to include in the response. Request data types relevant to the task/question at hand. As a default, use temperature and condition, including others if they're noteworthy.","items":{"type":"string","enum":["low","high","temperature","feels_like","condition","visibility","dewpoint","humidity","pressure","precipitation_amount","precipitation_chance","wind_speed","wind_direction","uv_index","sunrise_time","sunset_time","air_quality_index","air_quality_category","air_pollutants"]}}},"required":["type","data"]}}]}
\`\`\`

---

Tool: Calendar_v1-0
\`\`\`json
{"Name":"Calendar_v1-0","Description":"Manages events in the Calendar app.","Functions":[{"function_name":"search_events","description":"Searches for calendar events based on a query and a specified time range relative to the current date.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"Optional search query to filter events by title or notes. The search is case-insensitive."},"past_days":{"type":"integer","description":"The number of days in the past (including today) to search for events."},"future_days":{"type":"integer","description":"The number of days in the future (including today) to search for events."},"has_location":{"type":"boolean","description":"Set to true to only search events with locations. Omit to search events regardless of whether they have a specified location."}},"required":["past_days","future_days"]}},{"function_name":"create_events","description":"Creates one or more new events in the Calendar app. Please add all available information for the event, such as notes, location, and url, if applicable.","parameters":{"type":"object","properties":{"events":{"type":"array","description":"An array of JSON dictionaries, where each dictionary represents an event to be created.","items":{"type":"object","properties":{"title":{"type":"string","description":"The title of the event."},"start_date":{"type":"datetime","description":"The start date and time of the event (Format: YYYY-MM-DD hh:mm:ss)."},"end_date":{"type":"datetime","description":"The end date and time of the event (Format: YYYY-MM-DD hh:mm:ss)."},"notes":{"type":"string","description":"Additional notes for the event."},"location":{"type":"string","description":"The physical location of the event."},"is_all_day":{"type":"boolean","description":"Set to true if the event is an all-day event."},"url":{"type":"string","description":"A URL associated with the event, such as a video conference link."}},"required":["title","start_date"]}}},"required":["events"]}},{"function_name":"edit_event","description":"Modifies the details of an existing calendar event.","parameters":{"type":"object","properties":{"start_date":{"type":"datetime","description":"The original start date and time of the event to be edited (Format: YYYY-MM-DD hh:mm:ss). Used for unique identification."},"calendar":{"type":"string","description":"The name of the calendar where the event to be edited is located. Used for unique identification."},"title":{"type":"string","description":"The original title of the event to be edited. Used for unique identification."},"content":{"type":"object","description":"An object containing the new content that will overwrite the specified event's attributes. Only include fields that are to be updated.","properties":{"title":{"type":"string","description":"The title of the event."},"start_date":{"type":"datetime","description":"The start date and time of the event (Format: YYYY-MM-DD hh:mm:ss)."},"end_date":{"type":"datetime","description":"The end date and time of the event (Format: YYYY-MM-DD hh:mm:ss)."},"notes":{"type":"string","description":"Additional notes for the event."},"location":{"type":"string","description":"The physical location of the event."},"is_all_day":{"type":"boolean","description":"Set to true if the event is an all-day event."},"url":{"type":"string","description":"A URL associated with the event, such as a video conference link."},"calendar":{"type":"string","description":"New calendar name to move the event to."}}}},"required":["start_date","calendar","title","content"]}}]}
\`\`\`

---

Tool: RecipeCataloger_v1-0
\`\`\`json
{"Name":"RecipeCataloger_v1-0","Description":"Enables access to a powerful recipe cataloging routine. This allows the system to efficiently find, extract, and organize recipes from various web sources, building a comprehensive personal recipe collection based on the user's culinary interests.","Functions":[{"function_name":"catalog_recipe","description":"Finds and saves web recipes. If user just wants to find a recipe, confirm first, explaining it will save the recipe to Notes and add ingredients to Reminders. If user asks to save a recipe, use directly.","parameters":{}}]}
\`\`\`

---

Tool: Messages_v1-0
\`\`\`json
{"Name":"Messages_v1-0","Description":"Sends messages via the Messages app. When you're told to \"tell\" something to someone, this is one way to do that. You must use the Contacts tool to get a valid phone number or email address to use as the recipient before using this tool.","Functions":[{"function_name":"send_message","description":"Sends a message to a specified recipient using the Messages app.","parameters":{"type":"object","properties":{"recipient":{"type":"string","description":"The name of the contact or the phone number/email address of the recipient. If a name is provided, the tool will attempt to resolve it to a contact."},"message_body":{"type":"string","description":"The content of the message to be sent."}},"required":["recipient","message_body"]}}]}
\`\`\`

---

Tool: VoiceMode_v1-0
\`\`\`json
{"Name":"VoiceMode_v1-0","Description":"Manages voice communication with the user, enabling spoken interactions.","Functions":[{"function_name":"voice_chat","description":"Activates the voice chat mode. Upon activation, the system will be ready to receive spoken input from the user. The LLM should then prompt the user to speak.","parameters":{}},{"function_name":"continue_voice_chat","description":"Speaks a message provided by the LLM to the user, then listens for and captures the user's spoken response, returning it as a string.","parameters":{"type":"object","properties":{"message_content":{"type":"string","description":"The message content that the LLM wishes to speak to the user. If omitted, the system will just listen for a response from the user."}}}},{"function_name":"end_voice_chat","description":"Deactivates the voice chat mode, returning the system to standard text-based interaction.","parameters":{}}]}
\`\`\`

---

Tool: RunJavaScript_v1-0
\`\`\`json
{"Name":"RunJavaScript_v1-0","Description":"Executes custom JavaScript code within a secure environment. Whenever appropriate and possible, use this JavaScript tool when running code to help answer a question. For example, if asked to count words/letters, or do other string processing or math operations, you should generate JavaScript and run run it with this tool. Only use another code/terminal tool if the users requests a different language other than JavaScript.","Functions":[{"function_name":"run_javascript","description":"Executes a provided JavaScript script. This is the preferred method for performing computational tasks such as calculations, string manipulations, and other similar logical operations, rather than using other general-purpose execution environments for such purposes, especially if working in JavaScript. The script must produce a string as its final return value. If the intended return value is a complex data structure (e.g., an object or array), it must be serialized into a JSON string before being returned.","parameters":{"type":"object","properties":{"script":{"type":"string","description":"The JavaScript code to execute. This script should perform the desired action and must explicitly return a string value. For example, to return an object, use return JSON.stringify({ key: 'value' });."}},"required":["script"]}}]}
\`\`\`

---

Tool: Mail_v1-0
\`\`\`json
{"Name":"Mail_v1-0","Description":"Sends emails via the Mail app. You must use the Contacts tool to get a valid phone number or email address to use as the recipient before using this tool.","Functions":[{"function_name":"send_mail","description":"Sends an email to a specified recipient using the Mail app.","parameters":{"type":"object","properties":{"recipient":{"type":"string","description":"The email address of the recipient. If a name is provided, the tool will attempt to resolve it to a contact."},"body":{"type":"string","description":"The content of the email to be sent."},"subject":{"type":"string","description":"The subject of the email to be sent."}},"required":["recipient","body","subject"]}}]}
\`\`\`

---

Tool: Pythonista_v1-0
\`\`\`json
{"Name":"Pythonista_v1-0","Description":"Executes Python code using the Pythonista app on iOS.","Functions":[{"function_name":"run_python_script","description":"Executes a provided Python script within the Pythonista environment. The script's output (e.g., from print statements or the final evaluated expression) will be returned as a string. If the intended return value is a complex data structure (e.g., a dictionary or list), it must be serialized into a JSON string before being printed or returned.","parameters":{"type":"object","properties":{"script":{"type":"string","description":"The raw Python code to execute. This can be a single line or a multiline script. The tool will execute this code directly. For example: print('Hello') or x = 10\ny = 20\nprint(x + y)."}},"required":["script"]}}]}
\`\`\`

END TOOLS

# Task Instructions & State Management
Carefully analyze the complete conversation history, especially the user's original request and the results of recent tool executions (messages with \`role: tool\`).

1.  **Understand the Final Goal:** Clarify what the user ultimately wants to achieve.
2.  **Determine Current State:** Based on the history, assess how far the task has progressed.
3.  **Plan the Next Step:** Decide the **next logical action** required to reach the final goal:
    * **Call a Tool?** Is it necessary to call a tool to get information or perform an action? If yes, select the **single most appropriate** tool and function, and extract the required parameters from the conversation history.
    * **Conditional Logic?** If the previous step involved fetching information (like a weather check), evaluate the result to determine the next action (e.g., only add a reminder if it's not raining).
    * **Task Completion?** Have all necessary steps been executed?
    * **Need Clarification?** Is there insufficient information to proceed?
4.  **Output Decision:** Based on your judgment, generate the JSON containing the next action.

# Output Format (Mandatory JSON)
Your final decision **must** comply with the following JSON schema:

\`\`\`json
{"type":"object","properties":{"status":{"type":"string","description":"Overall status of the task.","enum":["in_progress","completed","clarification_needed"]},"decision":{"type":"string","description":"Type of the next action. 'quit' if the task is complete and no follow up is desired.","enum":["tool","direct","quit"]},"decision_notes":{"type":"string","description":"If decision is 'tool', provide a brief explanation for the user about the upcoming action using no more than 15 words, e.g., 'Checking tomorrow's weather...' or 'Adding a reminder for you...'. This field is null if decision is 'direct'."},"tool_name":{"type":"string","description":"If decision is 'tool', the name of the selected Shortcut."},"function_name":{"type":"string","description":"If decision is 'tool', the name of the selected function."},"parameters":{"type":"object","description":"If decision is 'tool', a JSON object containing extracted parameters."},"direct_response":{"type":"string","description":"If status is 'completed' or 'clarification_needed', this is the final response or clarification question for the user. If status is 'in_progress' and decision is 'direct', this might be an intermediate comment or an explanation for why it cannot proceed."},"user_options":{"type":"object","description":"OMIT IF UNUSED. If the decision is 'direct', you can provide a list of strings from which the user will choose instead of providing you with a text response. If this is used, then 'direct_response' wont be shown and should be null. 'user_prompt' should still be provided.","properties":{"options":{"type":"array","description":"A list of strings to be shown as options.","items":{"type":"string"}},"select_multiple":{"type":"boolean","description":"allow multiple items to be selected"},"select_all_initially":{"type":"boolean","description":"if multiple selection enabled, present list with all items selected"}}},"prompt_for_user":{"type":"string","description":"If decision is 'direct', this field must be completed. It is shown to the user *after the 'direct_response' when their input is requested. It should feel like a follow up question to the 'direct_response', or a single_sentence summary. It should be not much longer than 30 words. It should not feel too repetitive of the 'direct_response'. This field is null if decision is 'tool'."}},"required":["status","decision"]}
\`\`\`

# Execution Logic

- When you decide to use a tool (decision: "tool"), you must also populate the decision_notes field. This field should contain a brief, user-facing message explaining the action you are about to take (e.g., "Booking that reminder now...").
- Your application will show the decision_notes to the user while it executes the tool call in the background.

# SYSTEM INFORMATION

Current Time: Thursday, 2025-06-12 05:06:03 MDT
Response Language: English
Device type: AppleSilicon Mac`;

let next_role = "";
let next_step = {};
let decision_notes = "";
let token_usage = {};

// --- 1. SCHEMA DEFINITIONS ---

const GLOBAL_SCHEMA_STRING = `{"type":"object","properties":{"status":{"type":"string","description":"Overall status of the task.","enum":["in_progress","completed","clarification_needed"]},"decision":{"type":"string","description":"Type of the next action. 'quit' if the task is complete and no follow up is desired.","enum":["tool","direct","quit"]},"decision_notes":{"type":"string","description":"If decision is 'tool', provide a brief explanation for the user about the upcoming action using no more than 15 words, e.g., 'Checking tomorrow's weather...' or 'Adding a reminder for you...'. This field is null if decision is 'direct'."},"tool_name":{"type":"string","description":"If decision is 'tool', the name of the selected Shortcut."},"function_name":{"type":"string","description":"If decision is 'tool', the name of the selected function."},"parameters":{"type":"object","description":"If decision is 'tool', a JSON object containing extracted parameters."},"direct_response":{"type":"string","description":"If status is 'completed' or 'clarification_needed', this is the final response or clarification question for the user. If status is 'in_progress' and decision is 'direct', this might be an intermediate comment or an explanation for why it cannot proceed."},"user_options":{"type":"object","description":"OMIT IF UNUSED. If the decision is 'direct', you can provide a list of strings from which the user will choose instead of providing you with a text response. If this is used, then 'direct_response' wont be shown and should be null. 'user_prompt' should still be provided.","properties":{"options":{"type":"array","description":"A list of strings to be shown as options.","items":{"type":"string"}},"select_multiple":{"type":"boolean","description":"allow multiple items to be selected"},"select_all_initially":{"type":"boolean","description":"if multiple selection enabled, present list with all items selected"}}},"prompt_for_user":{"type":"string","description":"If decision is 'direct', this field must be completed. It is shown to the user *after the 'direct_response' when their input is requested. It should feel like a follow up question to the 'direct_response', or a single_sentence summary. It should be not much longer than 30 words. It should not feel too repetitive of the 'direct_response'. This field is null if decision is 'tool'."}},"required":["status","decision"]}`;
const TOOL_SCHEMAS = {"DeepResearch_v1-0":"{\"Name\":\"DeepResearch_v1-0\",\"Description\":\"Activates a deep research routine to aggregate data from multiple sources for detailed, factual reports.\",\"Functions\":[{\"function_name\":\"deep_research\",\"description\":\"Performs in-depth research for detailed reports. For general queries, ask to confirm before using. If the user explicitly says 'research', use without asking.\",\"parameters\":{}}]}","Web_v1-0":"{\"Name\":\"Web_v1-0\",\"Description\":\"Searches web and gets webpage content.\",\"Note\":\"open_url is not supported on Apple Watch or HomePod.\",\"Functions\":[{\"function_name\":\"Google Search\",\"description\":\"Performs a Google search.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Search query.\"},\"start_page\":{\"type\":\"integer\",\"description\":\"Starting page number (1-10).\"},\"end_page\":{\"type\":\"integer\",\"description\":\"Ending page number (1-10, >= start_page).\"}},\"required\":[\"query\",\"start_page\",\"end_page\"]}},{\"function_name\":\"open_url\",\"description\":\"Opens a URL in the browser.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"url\":{\"type\":\"string\",\"description\":\"URL to open.\"}},\"required\":[\"url\"]}},{\"function_name\":\"get_webpage_content\",\"description\":\"Gets raw content from a list of URLs.\",\"tip\":\"Add .json to Reddit URLs to get post contents.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"urls\":{\"type\":\"array\",\"description\":\"List of URLs to get content from.\",\"items\":{\"type\":\"string\"}},\"get_raw_content\":{\"type\":\"boolean\",\"description\":\"Default is reader-view for articles (less tokens). Set true for full raw content.\"}},\"required\":[\"urls\"]}}]}","Contacts_v1-0":"{\"Name\":\"Contacts_v1-0\",\"Description\":\"Manages iOS contacts.\",\"Functions\":[{\"function_name\":\"search_contacts\",\"description\":\"Searches for contacts.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Case-insensitive regex for name, phone, email, or company.\"}},\"required\":[\"query\"]}},{\"function_name\":\"add_contact\",\"description\":\"Adds a new contact.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"first_name\":{\"type\":\"string\",\"description\":\"Contact's first name.\"},\"last_name\":{\"type\":\"string\",\"description\":\"Contact's last name.\"},\"phone_number\":{\"type\":\"string\",\"description\":\"Primary phone number.\"},\"email_address\":{\"type\":\"string\",\"description\":\"Primary email address.\"},\"company\":{\"type\":\"string\",\"description\":\"Contact's company.\"},\"notes\":{\"type\":\"string\",\"description\":\"Notes about the contact.\"}},\"required\":[\"first_name\"]}}]}","Terminal_v1-0":"{\"Name\":\"Terminal_v1-0\",\"Description\":\"Local Unix terminal (iOS a-Shell, macOS bash). Supports commands like grep, curl, git, ffmpeg. Not for Apple Watch or HomePod.\",\"Functions\":[{\"function_name\":\"execute_command\",\"description\":\"Executes a shell command.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"command\":{\"type\":\"string\",\"description\":\"The shell command to execute.\"}},\"required\":[\"command\"]}}]}","Memory_v1-0":"{\"Name\":\"Memory_v1-0\",\"Description\":\"Saves, views, and searches for information about the user to recall later, like preferences, facts, and events.\",\"Functions\":[{\"function_name\":\"save_memory\",\"description\":\"Saves a new memory.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"memory\":{\"type\":\"object\",\"description\":\"Memory object with type, content, and keywords.\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"The category of the memory.\",\"enum\":[\"entity\",\"relationship\",\"event\",\"fact\",\"instruction\",\"definition\",\"preference\",\"goal\"]},\"content\":{\"type\":\"string\",\"description\":\"Information to remember.\"},\"keywords\":{\"type\":\"array\",\"description\":\"Keywords for recall. For events, include month and year.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"type\",\"content\",\"keywords\"]}},\"required\":[\"memory\"]}},{\"function_name\":\"retrieve_all_memories\",\"description\":\"Returns all memories.\",\"parameters\":{}},{\"function_name\":\"view_memories\",\"description\":\"Opens the memory storage for user Browse.\",\"parameters\":{}},{\"function_name\":\"search_memories\",\"description\":\"Searches memories by type, content, and keywords.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"queries\":{\"type\":\"array\",\"description\":\"Queries to search memories.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"queries\"]}},{\"function_name\":\"clear_memory\",\"description\":\"Deletes all memories.\",\"note\":\"Verify with the user before clearing all memories.\",\"parameters\":{}}]}","Reminders_v1-0":"{\"Name\":\"Reminders_v1-0\",\"Description\":\"Manages tasks and reminders in the Reminders app.\",\"Functions\":[{\"function_name\":\"list_reminders\",\"description\":\"Lists reminders, filtered by query and date.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Regex for title\/notes. Be generous with matches.\"},\"list\":{\"type\":\"string\",\"description\":\"List to search in.\"},\"begin_date\":{\"type\":\"datetime\",\"description\":\"Start date for search (YYYY-MM-DD hh:mm:ss).\"},\"include_completed\":{\"type\":\"boolean\",\"description\":\"Include completed reminders. Default false.\"}},\"required\":[\"query\",\"list\",\"begin_date\"]}},{\"function_name\":\"get_reminder_lists\",\"description\":\"Retrieves all reminder lists.\",\"parameters\":{}},{\"function_name\":\"get_reminder_tags\",\"description\":\"Retrieves all unique tags from reminders.\",\"parameters\":{}},{\"function_name\":\"add_new_reminders\",\"description\":\"Adds one or more new reminders.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"reminders\":{\"type\":\"array\",\"description\":\"Array of reminder objects to add.\",\"items\":{\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title.\"},\"list\":{\"type\":\"string\",\"description\":\"List name. Uses default list if omitted.\"},\"new_list\":{\"type\":\"boolean\",\"description\":\"Set true to create the list if it doesn't exist.\"},\"due_date\":{\"type\":\"datetime\",\"description\":\"Reminder alert time (YYYY-MM-DD hh:mm:ss).\"},\"flag\":{\"type\":\"boolean\",\"description\":\"Set true to flag as important.\"},\"tags\":{\"type\":\"string\",\"description\":\"Comma-separated tags.\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes.\"},\"url\":{\"type\":\"string\",\"description\":\"Associated URL.\"},\"subtasks\":{\"type\":\"array\",\"description\":\"Optional array of subtasks.\",\"items\":{\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title.\"},\"list\":{\"type\":\"string\",\"description\":\"List name. Uses default list if omitted.\"},\"new_list\":{\"type\":\"boolean\",\"description\":\"Set true to create the list if it doesn't exist.\"},\"due_date\":{\"type\":\"datetime\",\"description\":\"Reminder alert time (YYYY-MM-DD hh:mm:ss).\"},\"flag\":{\"type\":\"boolean\",\"description\":\"Set true to flag as important.\"},\"tags\":{\"type\":\"string\",\"description\":\"Comma-separated tags.\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes.\"},\"url\":{\"type\":\"string\",\"description\":\"Associated URL.\"}},\"required\":[\"title\"]}}},\"required\":[\"title\"]}}},\"required\":[\"reminders\"]}},{\"function_name\":\"complete_reminder\",\"description\":\"Marks a reminder as completed or incomplete.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"list\":{\"type\":\"string\",\"description\":\"List containing the reminder.\"},\"title\":{\"type\":\"string\",\"description\":\"Exact title of the reminder.\"},\"creation_date\":{\"type\":\"datetime\",\"description\":\"Creation date (YYYY-MM-DD hh:mm:ss) for unique ID.\"},\"is_completed\":{\"type\":\"boolean\",\"description\":\"Set true to complete, false to un-complete.\"}},\"required\":[\"list\",\"title\",\"creation_date\",\"is_completed\"]}},{\"function_name\":\"edit_reminder\",\"description\":\"Modifies an existing reminder.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"list\":{\"type\":\"string\",\"description\":\"List containing the reminder.\"},\"title\":{\"type\":\"string\",\"description\":\"Exact title of the reminder.\"},\"creation_date\":{\"type\":\"datetime\",\"description\":\"Creation date (YYYY-MM-DD hh:mm:ss) for unique ID.\"},\"is_completed\":{\"type\":\"boolean\",\"description\":\"Current completion status for identification.\"},\"content\":{\"type\":\"object\",\"description\":\"Object with new attributes to overwrite.\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title.\"},\"list\":{\"type\":\"string\",\"description\":\"List name. Uses default list if omitted.\"},\"new_list\":{\"type\":\"boolean\",\"description\":\"Set true to create the list if it doesn't exist.\"},\"due_date\":{\"type\":\"datetime\",\"description\":\"Reminder alert time (YYYY-MM-DD hh:mm:ss).\"},\"flag\":{\"type\":\"boolean\",\"description\":\"Set true to flag as important.\"},\"tags\":{\"type\":\"string\",\"description\":\"Comma-separated tags.\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes.\"},\"url\":{\"type\":\"string\",\"description\":\"Associated URL.\"}}}},\"required\":[\"list\",\"title\",\"creation_date\",\"is_completed\",\"content\"]}},{\"function_name\":\"open_reminder_list\",\"description\":\"Opens a specific reminder list.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"list\":{\"type\":\"string\",\"description\":\"Name of the reminder list to open.\"}},\"required\":[\"list\"]}}]}","Notes_v1-0":"{\"Name\":\"Notes_v1-0\",\"Description\":\"Create, modify, organize, and search notes.\",\"Functions\":[{\"function_name\":\"add_new_notes\",\"description\":\"Adds one or more new notes.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"notes\":{\"type\":\"array\",\"description\":\"Array of note objects to add.\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Note title.\"},\"body\":{\"type\":\"string\",\"description\":\"Note content.\"},\"folder\":{\"type\":\"string\",\"description\":\"Folder to save note in.\"},\"tags\":{\"type\":\"array\",\"description\":\"Optional list of tags.\",\"items\":{\"type\":\"string\"}},\"todos\":{\"type\":\"array\",\"description\":\"Optional list of todos.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"body\",\"folder\"]}}},\"required\":[\"notes\"]}},{\"function_name\":\"append_to_note\",\"description\":\"Appends content to a note.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Name of the note to modify.\"},\"body\":{\"type\":\"string\",\"description\":\"Partial body text to find unique note.\"},\"content\":{\"type\":\"object\",\"description\":\"Content to append. Use one or more of `body`, `tags`, or `todos`.\",\"properties\":{\"body\":{\"type\":\"string\",\"description\":\"Additional text to append.\"},\"tags\":{\"type\":\"array\",\"description\":\"Tags to add.\",\"items\":{\"type\":\"string\"}},\"todos\":{\"type\":\"array\",\"description\":\"Todos to add.\",\"items\":{\"type\":\"string\"}}}}},\"required\":[\"name\",\"body\",\"content\"]}},{\"function_name\":\"open_note\",\"description\":\"Opens a note for viewing.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Name of the note to modify.\"},\"body\":{\"type\":\"string\",\"description\":\"Partial body text to find unique note.\"}},\"required\":[\"name\",\"body\"]}},{\"function_name\":\"remove_tags_from_note\",\"description\":\"Removes tags from a note.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Name of the note to modify.\"},\"body\":{\"type\":\"string\",\"description\":\"Partial body text to find unique note.\"},\"tags\":{\"type\":\"array\",\"description\":\"Tags to remove.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"body\",\"tags\"]}},{\"function_name\":\"search_notes\",\"description\":\"Searches note titles and bodies for a query.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Search query.\"}},\"required\":[\"query\"]}},{\"function_name\":\"get_folder_list\",\"description\":\"Lists all note folders.\",\"parameters\":{}},{\"function_name\":\"get_tag_list\",\"description\":\"Lists all unique tags.\",\"parameters\":{}},{\"function_name\":\"open_folder\",\"description\":\"Opens a note folder.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"folder\":{\"type\":\"string\",\"description\":\"Name of the folder to open.\"}},\"required\":[\"folder\"]}}]}","Maps_v1-0":"{\"Name\":\"Maps_v1-0\",\"Description\":\"Provides capabilities for searching places, initiating navigation, and retrieving current location using map applications on iOS.\",\"Functions\":[{\"function_name\":\"search_places\",\"description\":\"Searches for places of interest near a current or specified geographical location.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"The search query for the place (e.g., 'coffee shop', 'pizza', 'park').\"},\"city\":{\"type\":\"string\",\"description\":\"Optional city to narrow down the search location. Used in conjunction with state and country.\"},\"state\":{\"type\":\"string\",\"description\":\"Optional state to narrow down the search location. Used in conjunction with city and country.\"},\"country\":{\"type\":\"string\",\"description\":\"Optional country to narrow down the search location. Used with city\/state or zip code.\"},\"zip_code\":{\"type\":\"string\",\"description\":\"Optional zip code to narrow down the search location. If provided, city\/state will be ignored.\"},\"search_radius\":{\"type\":\"number\",\"description\":\"The search radius in miles.\"}},\"required\":[\"query\"]}},{\"function_name\":\"start_navigation\",\"description\":\"Initiates turn-by-turn navigation to a specified destination using a selected map application.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"map_app\":{\"type\":\"string\",\"description\":\"The preferred map application for navigation. Use Maps by default, or if unspecified.\",\"enum\":[\"Maps\",\"Google Maps\",\"Waze\"]},\"destination\":{\"type\":\"string\",\"description\":\"The full address of the destination to navigate to (e.g., '1600 Amphitheatre Parkway, Mountain View, CA 94043').\"}},\"required\":[\"map_app\",\"destination\"]}},{\"function_name\":\"get_current_location\",\"description\":\"Retrieves the user's current geographical location (latitude, longitude, and address). Use this tool if the user says something like '...near me' or '...in my town', so that you don't need to ask the user directly.\",\"parameters\":{}}]}","SummarizeText_v1-0":"{\"Name\":\"SummarizeText_v1-0\",\"Description\":\"Summarizes text in order to have it consume fewer tokens.\",\"Functions\":[{\"function_name\":\"summarize_webpages\",\"description\":\"Retrieves content from the specified URLs and generates a summary for each. The function returns a JSON dictionary where keys are the URLs and values are their corresponding summaries.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"urls\":{\"type\":\"array\",\"description\":\"A list of full URLs of the webpages to be summarized (e.g., ['https:\/\/example.com\/article1', 'https:\/\/example.com\/article2']). Each URL must be a valid string.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"urls\"]}},{\"function_name\":\"summarize_text\",\"description\":\"Summarizes a text string.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"text\":{\"type\":\"string\",\"description\":\"A text string to summarize. This is only to be used in order to summarize text so that it consumes fewer tokens in future LLM API calls. If the user actually requests for text summarization, do not use this tool, and instead perform the summary yourself.\"}},\"required\":[\"text\"]}}]}","Weather_v1-0":"{\"Name\":\"Weather_v1-0\",\"Description\":\"Retrieves weather forecasts.\",\"Functions\":[{\"function_name\":\"get_weather\",\"description\":\"Retrieves the current real-time or forecasted weather for the specified location, as city [+ state [+ country]] or zip + country. Feel free to speculate about the state and country. If no location is specified, the user's current location is used.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"city\":{\"type\":\"string\",\"description\":\"The name of the city for which to retrieve the current weather.\"},\"state\":{\"type\":\"string\",\"description\":\"The name of the state for which to retrieve the current weather.\"},\"country\":{\"type\":\"string\",\"description\":\"The name of the country for which to retrieve the current weather. e.g. 'United States'\"},\"zip\":{\"type\":\"number\",\"description\":\"The ZIP code for which to retrieve the current weather. If provided, please provide country as well.\"},\"type\":{\"type\":\"string\",\"description\":\"The type of weather data to retrieve. Must be either 'current' for real-time weather, or 'hourly' or 'daily' for 24-hour or 10-day forecasted weather respectively. Use 'hourly' as default.\",\"enum\":[\"current\",\"hourly\",\"daily\"]},\"data\":{\"type\":\"array\",\"description\":\"An array of data types to include in the response. Request data types relevant to the task\/question at hand. As a default, use temperature and condition, including others if they're noteworthy.\",\"items\":{\"type\":\"string\",\"enum\":[\"low\",\"high\",\"temperature\",\"feels_like\",\"condition\",\"visibility\",\"dewpoint\",\"humidity\",\"pressure\",\"precipitation_amount\",\"precipitation_chance\",\"wind_speed\",\"wind_direction\",\"uv_index\",\"sunrise_time\",\"sunset_time\",\"air_quality_index\",\"air_quality_category\",\"air_pollutants\"]}}},\"required\":[\"type\",\"data\"]}}]}","Calendar_v1-0":"{\"Name\":\"Calendar_v1-0\",\"Description\":\"Manages events in the Calendar app.\",\"Functions\":[{\"function_name\":\"search_events\",\"description\":\"Searches for calendar events based on a query and a specified time range relative to the current date.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Optional search query to filter events by title or notes. The search is case-insensitive.\"},\"past_days\":{\"type\":\"integer\",\"description\":\"The number of days in the past (including today) to search for events.\"},\"future_days\":{\"type\":\"integer\",\"description\":\"The number of days in the future (including today) to search for events.\"},\"has_location\":{\"type\":\"boolean\",\"description\":\"Set to true to only search events with locations. Omit to search events regardless of whether they have a specified location.\"}},\"required\":[\"past_days\",\"future_days\"]}},{\"function_name\":\"create_events\",\"description\":\"Creates one or more new events in the Calendar app. Please add all available information for the event, such as notes, location, and url, if applicable.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"events\":{\"type\":\"array\",\"description\":\"An array of JSON dictionaries, where each dictionary represents an event to be created.\",\"items\":{\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title of the event.\"},\"start_date\":{\"type\":\"datetime\",\"description\":\"The start date and time of the event (Format: YYYY-MM-DD hh:mm:ss).\"},\"end_date\":{\"type\":\"datetime\",\"description\":\"The end date and time of the event (Format: YYYY-MM-DD hh:mm:ss).\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes for the event.\"},\"location\":{\"type\":\"string\",\"description\":\"The physical location of the event.\"},\"is_all_day\":{\"type\":\"boolean\",\"description\":\"Set to true if the event is an all-day event.\"},\"url\":{\"type\":\"string\",\"description\":\"A URL associated with the event, such as a video conference link.\"}},\"required\":[\"title\",\"start_date\"]}}},\"required\":[\"events\"]}},{\"function_name\":\"edit_event\",\"description\":\"Modifies the details of an existing calendar event.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"start_date\":{\"type\":\"datetime\",\"description\":\"The original start date and time of the event to be edited (Format: YYYY-MM-DD hh:mm:ss). Used for unique identification.\"},\"calendar\":{\"type\":\"string\",\"description\":\"The name of the calendar where the event to be edited is located. Used for unique identification.\"},\"title\":{\"type\":\"string\",\"description\":\"The original title of the event to be edited. Used for unique identification.\"},\"content\":{\"type\":\"object\",\"description\":\"An object containing the new content that will overwrite the specified event's attributes. Only include fields that are to be updated.\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"The title of the event.\"},\"start_date\":{\"type\":\"datetime\",\"description\":\"The start date and time of the event (Format: YYYY-MM-DD hh:mm:ss).\"},\"end_date\":{\"type\":\"datetime\",\"description\":\"The end date and time of the event (Format: YYYY-MM-DD hh:mm:ss).\"},\"notes\":{\"type\":\"string\",\"description\":\"Additional notes for the event.\"},\"location\":{\"type\":\"string\",\"description\":\"The physical location of the event.\"},\"is_all_day\":{\"type\":\"boolean\",\"description\":\"Set to true if the event is an all-day event.\"},\"url\":{\"type\":\"string\",\"description\":\"A URL associated with the event, such as a video conference link.\"},\"calendar\":{\"type\":\"string\",\"description\":\"New calendar name to move the event to.\"}}}},\"required\":[\"start_date\",\"calendar\",\"title\",\"content\"]}}]}","RecipeCataloger_v1-0":"{\"Name\":\"RecipeCataloger_v1-0\",\"Description\":\"Enables access to a powerful recipe cataloging routine. This allows the system to efficiently find, extract, and organize recipes from various web sources, building a comprehensive personal recipe collection based on the user's culinary interests.\",\"Functions\":[{\"function_name\":\"catalog_recipe\",\"description\":\"Finds and saves web recipes. If user just wants to find a recipe, confirm first, explaining it will save the recipe to Notes and add ingredients to Reminders. If user asks to save a recipe, use directly.\",\"parameters\":{}}]}","Messages_v1-0":"{\"Name\":\"Messages_v1-0\",\"Description\":\"Sends messages via the Messages app. When you're told to \\\"tell\\\" something to someone, this is one way to do that. You must use the Contacts tool to get a valid phone number or email address to use as the recipient before using this tool.\",\"Functions\":[{\"function_name\":\"send_message\",\"description\":\"Sends a message to a specified recipient using the Messages app.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"recipient\":{\"type\":\"string\",\"description\":\"The name of the contact or the phone number\/email address of the recipient. If a name is provided, the tool will attempt to resolve it to a contact.\"},\"message_body\":{\"type\":\"string\",\"description\":\"The content of the message to be sent.\"}},\"required\":[\"recipient\",\"message_body\"]}}]}","VoiceMode_v1-0":"{\"Name\":\"VoiceMode_v1-0\",\"Description\":\"Manages voice communication with the user, enabling spoken interactions.\",\"Functions\":[{\"function_name\":\"voice_chat\",\"description\":\"Activates the voice chat mode. Upon activation, the system will be ready to receive spoken input from the user. The LLM should then prompt the user to speak.\",\"parameters\":{}},{\"function_name\":\"continue_voice_chat\",\"description\":\"Speaks a message provided by the LLM to the user, then listens for and captures the user's spoken response, returning it as a string.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"message_content\":{\"type\":\"string\",\"description\":\"The message content that the LLM wishes to speak to the user. If omitted, the system will just listen for a response from the user.\"}}}},{\"function_name\":\"end_voice_chat\",\"description\":\"Deactivates the voice chat mode, returning the system to standard text-based interaction.\",\"parameters\":{}}]}","RunJavaScript_v1-0":"{\"Name\":\"RunJavaScript_v1-0\",\"Description\":\"Executes custom JavaScript code within a secure environment. Whenever appropriate and possible, use this JavaScript tool when running code to help answer a question. For example, if asked to count words\/letters, or do other string processing or math operations, you should generate JavaScript and run run it with this tool. Only use another code\/terminal tool if the users requests a different language other than JavaScript.\",\"Functions\":[{\"function_name\":\"run_javascript\",\"description\":\"Executes a provided JavaScript script. This is the preferred method for performing computational tasks such as calculations, string manipulations, and other similar logical operations, rather than using other general-purpose execution environments for such purposes, especially if working in JavaScript. The script must produce a string as its final return value. If the intended return value is a complex data structure (e.g., an object or array), it must be serialized into a JSON string before being returned.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"script\":{\"type\":\"string\",\"description\":\"The JavaScript code to execute. This script should perform the desired action and must explicitly return a string value. For example, to return an object, use return JSON.stringify({ key: 'value' });.\"}},\"required\":[\"script\"]}}]}","Mail_v1-0":"{\"Name\":\"Mail_v1-0\",\"Description\":\"Sends emails via the Mail app. You must use the Contacts tool to get a valid phone number or email address to use as the recipient before using this tool.\",\"Functions\":[{\"function_name\":\"send_mail\",\"description\":\"Sends an email to a specified recipient using the Mail app.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"recipient\":{\"type\":\"string\",\"description\":\"The email address of the recipient. If a name is provided, the tool will attempt to resolve it to a contact.\"},\"body\":{\"type\":\"string\",\"description\":\"The content of the email to be sent.\"},\"subject\":{\"type\":\"string\",\"description\":\"The subject of the email to be sent.\"}},\"required\":[\"recipient\",\"body\",\"subject\"]}}]}","Pythonista_v1-0":"{\"Name\":\"Pythonista_v1-0\",\"Description\":\"Executes Python code using the Pythonista app on iOS.\",\"Functions\":[{\"function_name\":\"run_python_script\",\"description\":\"Executes a provided Python script within the Pythonista environment. The script's output (e.g., from print statements or the final evaluated expression) will be returned as a string. If the intended return value is a complex data structure (e.g., a dictionary or list), it must be serialized into a JSON string before being printed or returned.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"script\":{\"type\":\"string\",\"description\":\"The raw Python code to execute. This can be a single line or a multiline script. The tool will execute this code directly. For example: print('Hello') or x = 10\\ny = 20\\nprint(x + y).\"}},\"required\":[\"script\"]}}]}"};

// --- VALIDATION FUNCTIONS ---

// Validate object against a JSON Schema.
const checkObjectSchema = (data, schema) => {
  // Check for required fields
  for (const requiredField of (schema.required || [])) {
    if (data[requiredField] === undefined) {
      return `Schema Error: Missing required field '${requiredField}'.`;
    }
  }
  // Check types of all provided data fields
  for (const key in data) {
    if (data[key] !== undefined && data[key] !== null) {
      const propertySchema = schema.properties[key];

      if (propertySchema === undefined) {
        // This optional check handles properties that are in the data but not defined in the schema.
        // You can uncomment it for stricter validation.
        // return `Schema Error: Unknown property '${key}' provided.`; 
      } else {
        // --- NEW: Check that the schema property itself has a 'type' defined ---
        if (propertySchema.type === undefined) {
          return `FATAL Schema Error: The definition for property '${key}' is missing a 'type' attribute in your schema.`;
        }
        // --- End of new check ---
        
        const expectedType = propertySchema.type;
        const actualType = Array.isArray(data[key]) ? "array" : typeof data[key];
        
        if (actualType !== expectedType) {
          return `Schema Error: Field '${key}' has wrong type. Expected '${expectedType}', got '${actualType}'.`;
        }
      }
    }
  }
  return null; // No error
};

// Main validation function
function validate(modelContentString, globalSchemaString, toolSchemas) {
  let globalSchema;
  let parsedModelJson;

  try {
    globalSchema = JSON.parse(globalSchemaString);
  } catch (e) {
    return { isValid: false, error: `FATAL: Could not parse GLOBAL_SCHEMA string. Error: ${e.message}`, data: null };
  }

  try {
    parsedModelJson = JSON.parse(modelContentString);
  } catch (e) {
    return { isValid: false, error: `JSON Syntax Error: ${e.message}`, data: modelContentString };
  }

  // Level 2: Global Schema Validation
  let validationError = checkObjectSchema(parsedModelJson, globalSchema);
  if (validationError) {
    return { isValid: false, error: `Global Schema Error: ${validationError}`, data: modelContentString };
  }

  // Level 3: Tool Parameter Validation
  if (parsedModelJson.decision === 'tool') {
    const toolName = parsedModelJson.tool_name;
    const functionName = parsedModelJson.function_name;
    const toolSchemaString = toolSchemas[toolName];
    let badContent = modelContentString;

    if (!toolSchemaString) {
      validationError = `Tool Schema Error: No schema found for tool '${toolName}'.`;
    } else {
      try {
        const tool = JSON.parse(toolSchemaString);
        const funcSchema = tool.Functions.find(f => f.function_name === functionName);
        if (!funcSchema) {
          validationError = `Tool Schema Error: No function named '${functionName}' found in tool '${toolName}'.`;
        } else {
          // *** Using the single, unified validator here ***
          validationError = checkObjectSchema(parsedModelJson.parameters, funcSchema.parameters);
          if (validationError) {
            validationError = `For function '${functionName}' of tool '${toolName}', ${validationError}`;
            badContent = JSON.stringify(parsedModelJson.parameters, null, 0);
          }
        }
      } catch (e) {
        validationError = `Tool Schema Error: Failed to parse the schema for tool '${toolName}'. Error: ${e.message}`;
      }
    }
    if (validationError) {
      return { isValid: false, error: validationError, data: badContent };
    }
  }
  
  return { isValid: true, data: parsedModelJson };
}


// --- MAIN SCRIPT LOGIC ---

if (!request_data.headers || !request_data.body) {
    if (reasoning_effort){
      request_data = {
        headers: {
            auth_key_name: "Authorization",
            auth_api_key: `Bearer ${api_key}`
        },
        body: {
            messages: [],
            model: model_name,
            temperature: temperature,
            reasoning_effort: reasoning_effort,
            stream: false,
            response_format: { type: "json_object" }
        }
      };
    } else {
      request_data = {
        headers: {
            auth_key_name: "Authorization",
            auth_api_key: `Bearer ${api_key}`
        },
        body: {
            messages: [],
            model: model_name,
            temperature: temperature,
            stream: false,
            response_format: { type: "json_object" }
        }
      };
    }
}

if (request_data.body.messages.length == 0) {
    request_data.body.messages.push({
      role: provider == "OpenAI" ? "developer" : "system",
      content: system_prompt
    });
    next_role = "user";
}

if (new_msg?.role == "user" || new_msg?.role == "tool") {
    request_data.body.messages.push({
      role: "user",
      content: new_msg.content
    });
    next_role = "assistant";
}

if (new_msg?.role == "assistant") {
    const assistant_api_response = JSON.parse(new_msg.content);

    if (assistant_api_response.error) {
        next_role = "system";
        next_step = { error: `API Error: ${assistant_api_response.error.message}` };
    } else {
        const model_content_string = assistant_api_response.choices[0].message.content;
        const validationResult = validate(model_content_string, GLOBAL_SCHEMA_STRING, TOOL_SCHEMAS);

        if (validationResult.isValid) {
            const assistant_msg = validationResult.data;
            const usage = assistant_api_response.usage;
            token_usage = {
                prompt_tokens: usage.prompt_tokens,
                completion_tokens: usage.completion_tokens,
                total_tokens: usage.total_tokens
            };
            request_data.body.messages.push({
                role: "assistant",
                content: model_content_string
            });
            next_role = assistant_msg.decision === "tool" ? "tool" : "user";
            next_step = assistant_msg;
            if (next_role === "tool") {
                decision_notes = assistant_msg.decision_notes;
            }
        } else {
            const malformed_json = validationResult.data;
            const error_message = validationResult.error;
            const correction_prompt = `Your last response failed validation and could not be used. Please correct the error and provide only the valid JSON object as a response.\n\nERROR: ${error_message}\n\nHere is the invalid content you provided:\n${malformed_json || 'Content could not be parsed.'}`;
            
            if (malformed_json) {
                request_data.body.messages.push({
                    role: "assistant",
                    content: malformed_json
                });
            }
            
            next_role = "validator";
            next_step = { content: correction_prompt };
        }
    }
}

out = JSON.stringify({
    request_data,
    next_role,
    next_step,
    decision_notes: decision_notes || "",
    token_usage: token_usage || {}
});

// console.log(`Output: ${out}`);

console.log(next_step)

return out;